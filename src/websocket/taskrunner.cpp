// ===========================================================================
// Copyright (c) 2020, Electric Power Research Institute (EPRI)
// All rights reserved.
//
// dlms-access-point ("this software") is licensed under BSD 3-Clause license.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// *  Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// *  Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// *  Neither the name of EPRI nor the names of its contributors may
//    be used to endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// OF SUCH DAMAGE.
//
// This EPRI software incorporates work covered by the following copyright and permission
// notices. You may not use these works except in compliance with their respective
// licenses, which are provided below.
//
// These works are provided by the copyright holders and contributors "as is" and any express or
// implied warranties, including, but not limited to, the implied warranties of merchantability
// and fitness for a particular purpose are disclaimed.
//
// This software relies on the following libraries and licenses:
//
// ###########################################################################
// Boost Software License, Version 1.0
// ###########################################################################
//
// * Boost::Beast version 302 (https://github.com/boostorg/beast)
// Copyright (c) 2016-2017 Vinnie Falco (vinnie dot falco at gmail dot com)
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#include "taskrunner.h"

#include <boost/process.hpp>
#include <boost/beast/core/buffers_to_string.hpp>
#include <algorithm>
#include <cstdlib>
#include <functional>
#include <iostream>
#include <string>
#include <thread>
#include <vector>

using tcp = boost::asio::ip::tcp;               // from <boost/asio/ip/tcp.hpp>
namespace websocket = boost::beast::websocket;  // from <boost/beast/websocket.hpp>

//------------------------------------------------------------------------------

std::string fetchNetStats() {
    using namespace boost::process;
    ipstream pipe_stream;
    child c("ifstat -j", std_out > pipe_stream);

    std::string line;
    std::stringstream ss;

    while (pipe_stream && std::getline(pipe_stream, line) && !line.empty())
        ss << line << '\n';

    c.wait();
    return ss.str();
}

std::string invokeNetem() {
    using namespace boost::process;
    ipstream pipe_stream;
    child c("tc qdisc add dev eth0 root netem corrupt 25% 50%", std_out > pipe_stream);

    std::string line;
    std::stringstream ss;

    while (pipe_stream && std::getline(pipe_stream, line) && !line.empty())
        ss << line << '\n';

    c.wait();
    return ss.str();
}

// Report a failure
static void fail(boost::system::error_code ec, char const* what) {
    std::cerr << what << ": " << ec.message() << "\n";
}

// Take ownership of the socket
session::session(tcp::socket socket)
    : ws(std::move(socket))
    , strand(ws.get_executor())
{ }

// Start the asynchronous operation
void session::run() {
    // Accept the websocket handshake
    ws.async_accept(
        boost::asio::bind_executor(
            strand,
            std::bind(
                &session::on_accept,
                shared_from_this(),
                std::placeholders::_1
            )
        )
    );
}

void session::on_accept(boost::system::error_code ec) {
    if (ec) {
        fail(ec, "accept");
        return;
    }

    // Read a message
    do_read();
}

void session::do_read() {
    // Read a message into our buffer
    ws.async_read(
        buffer,
        boost::asio::bind_executor(
            strand,
            std::bind(
                &session::on_read,
                shared_from_this(),
                std::placeholders::_1,
                std::placeholders::_2
            )
        )
    );
}

void session::on_read(boost::system::error_code ec, std::size_t bytes_transferred) {
    boost::ignore_unused(bytes_transferred);

    if (ec == websocket::error::closed) {
        return;
    }

    if (ec) {
        fail(ec, "read");
    }

    // Echo the message
    ws.text(ws.got_text());
    if (buffers_to_string(buffer.data()) == "{netstat}") {
        buffer.consume(buffer.size());
        ostream(buffer) << fetchNetStats() << '\n';
    } else {
        // uncomment this to echo back the faulty command
        // buffer.consume(buffer.size());  
        ostream(buffer) << "{error:unknown_command}\n";
    }
    ws.async_write(
        buffer.data(),
        boost::asio::bind_executor(
            strand,
            std::bind(
                &session::on_write,
                shared_from_this(),
                std::placeholders::_1,
                std::placeholders::_2
            )
        )
    );
}

void session::on_write(boost::system::error_code ec, std::size_t bytes_transferred) {
    boost::ignore_unused(bytes_transferred);

    if (ec) {
        fail(ec, "write");
        return;
    }

    // Clear the buffer
    buffer.consume(buffer.size());

    // Do another read
    do_read();
}


//------------------------------------------------------------------------------

// Accepts incoming connections and launches the sessions
listener::listener(
    boost::asio::io_context& ioc,
    tcp::endpoint endpoint)
    : acceptor(ioc)
    , sock(ioc)
{
    boost::system::error_code ec;

    // Open the acceptor
    acceptor.open(endpoint.protocol(), ec);
    if (ec) {
        fail(ec, "open");
        return;
    }

    // Allow address reuse
    acceptor.set_option(boost::asio::socket_base::reuse_address(true), ec);
    if (ec) {
        fail(ec, "set_option");
        return;
    }

    // Bind to the server address
    acceptor.bind(endpoint, ec);
    if (ec) {
        fail(ec, "bind");
        return;
    }

    // Start listening for connections
    acceptor.listen(boost::asio::socket_base::max_listen_connections, ec);
    if (ec) {
        fail(ec, "listen");
        return;
    }
}

// Start accepting incoming connections
void listener::run() {
    if (! acceptor.is_open()) {
        return;
    }
    do_accept();
}

void listener::do_accept() {
    acceptor.async_accept(
        sock,
        std::bind(
            &listener::on_accept,
            shared_from_this(),
            std::placeholders::_1
        )
    );
}

void listener::on_accept(boost::system::error_code ec) {
    if (ec) {
        fail(ec, "accept");
    } else {
        // Create the session and run it
        std::make_shared<session>(std::move(sock))->run();
    }

    // Accept another connection
    do_accept();
}

void server(unsigned short port) {
    boost::asio::io_context ioc;
    std::make_shared<listener>(ioc, tcp::endpoint{boost::asio::ip::tcp::v6(), port})->run();
    ioc.run();
}

void usage() {
    std::cerr << "Usage: taskrunner portnum\n";
}

int main(int argc, char *argv[]) {
    std::string portnum{argv[1]};
    unsigned short port{8888};
    try {
        port = std::stoi(portnum);
    } catch(std::invalid_argument err) {
        usage();
        return 1;
    }
    std::cout << fetchNetStats() << '\n';
    // just camp here, waiting for network connections
    server(port);
}
